// Generated by Apple Swift version 3.0.2 (swiftlang-800.0.63 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import UIKit;
@import CoreGraphics;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class UIView;
@class UITableView;
@class UITableViewCell;

/**
  Wraps a UITableView in a node definition.
  <ul>
    <li>
      TableNode.children will be wrapped into UITableViewCell.
    </li>
    <li>
      Consider using TableNode over Node<ScrollView> where you have a big number of items to be
    </li>
    <li>
      displayed.
    </li>
  </ul>
*/
SWIFT_CLASS("_TtC6Render9TableNode")
@interface TableNode : NSObject <UITableViewDataSource, UITableViewDelegate>
/**
  The UITableView associated to this node.
*/
@property (nonatomic, readonly, strong) UIView * _Nullable renderedView;
/**
  The unique identifier for this node is its hierarchy.
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/**
  Set this property to ‘true’ if you want to disable the built-in cell reuse mechanism.
  <ul>
    <li>
      This could be beneficial when the number of items is limited and you wish to improve the
    </li>
    <li>
      overall scroll performance.
    </li>
  </ul>
*/
@property (nonatomic) BOOL disableCellReuse;
/**
  This component is the n-th children.
*/
@property (nonatomic) NSInteger index;
/**
  Re-applies the configuration closures to the UITableView and reload the data source.
*/
- (void)renderIn:(CGSize)bounds;
- (void)internalConfigureIn:(CGSize)bounds;
/**
  ‘willRender’ is not yet supported for TableNode.
*/
- (void)willRender;
/**
  ‘didRender’ is not yet supported for TableNode.
*/
- (void)didRender;
- (void)buildWith:(UIView * _Nullable)reusable;
/**
  Tells the data source to return the number of rows in a given section of a table view.
*/
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section;
/**
  Asks the data source for a cell to insert in a particular location of the table view.
*/
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface UIButton (SWIFT_EXTENSION(Render))
@end


@interface UICollectionView (SWIFT_EXTENSION(Render))
/**
  Refreshes the component at the given index path.
*/
- (void)renderAt:(NSIndexPath * _Nonnull)indexPath;
/**
  Re-renders all the compoents currently visible on screen.
  <ul>
    <li>
      Call this method whenever the collecrion view changes its bounds/size.
    </li>
  </ul>
*/
- (void)renderVisibleComponents;
@end


@interface UIImageView (SWIFT_EXTENSION(Render))
@end


@interface UILabel (SWIFT_EXTENSION(Render))
@end


@interface UIScrollView (SWIFT_EXTENSION(Render))
@end


@interface UITableView (SWIFT_EXTENSION(Render))
/**
  Refreshes the component at the given index path.
*/
- (void)renderAt:(NSIndexPath * _Nonnull)indexPath;
/**
  Re-renders all the compoents currently visible on screen.
  <ul>
    <li>
      Call this method whenever the table view changes its bounds/size.
    </li>
  </ul>
*/
- (void)renderVisibleComponents;
@end


@interface UITextField (SWIFT_EXTENSION(Render))
@end


@interface UITextView (SWIFT_EXTENSION(Render))
@end


@interface UIView (SWIFT_EXTENSION(Render))
@end


@interface UIView (SWIFT_EXTENSION(Render))
@property (nonatomic) BOOL isAnimatable;
@end

#pragma clang diagnostic pop
